{"buildingblocks":[{"id":"510","name":"API Description","summary":"There are several ways to descibe API, establish programmatic definition of the API, its endpoints, parameters and other values. Most methodologies are born out of the Web Application Description Language (WADL), such as Google Discovery Documents, I\/O Docs from Mashery and Swagger from Reverb. Whle WADL used XML, the newer approaches tend to use JSON. The reason to define your API can vary, but m","details":"There are several ways to descibe API, establish programmatic definition of the API, its endpoints, parameters and other values. Most methodologies are born out of the Web Application Description Language (WADL), such as Google Discovery Documents, I\/O Docs from Mashery and Swagger from Reverb. Whle WADL used XML, the newer approaches tend to use JSON. The reason to define your API can vary, but most companies are defining their APIs to create to generate what is known as interactive API documentation and to auto-generate code samples in a variety of language. ","image":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/building-blocks\/bw-swagger.png","tags":"API-Design"},{"id":"514","name":"API Gateway","summary":"API gateways are enterprise quality solutions that are designed to expose API resources. Gateways are meant to provide a complete solution for exposing internal systems and connecting with external platforms.\nAPI gateways are often used to proxy and mediate existing API deployments, but may also provide solutions for connecting to other internal systems like databases, FTP, messaging and other com","details":"API gateways are enterprise quality solutions that are designed to expose API resources. Gateways are meant to provide a complete solution for exposing internal systems and connecting with external platforms.\nAPI gateways are often used to proxy and mediate existing API deployments, but may also provide solutions for connecting to other internal systems like databases, FTP, messaging and other common resources.\nMany public APIs are exposed using frameworks, most enterprise APIs are deployed via API gateways--supporting much larger ideployments.","image":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/building-blocks\/bw-proxy-left.png","tags":"API-Design"},{"id":"509","name":"HATEOAS","summary":"HATEOAS, an abbreviation for Hypermedia as the Engine of Application State, is a constraint of the REST application architecture that distinguishes it from most other network application architectures. The principle is that a client interacts with a network application entirely through hypermedia provided dynamically by application servers. A REST client needs no prior knowledge about how to inter","details":"HATEOAS, an abbreviation for Hypermedia as the Engine of Application State, is a constraint of the REST application architecture that distinguishes it from most other network application architectures. The principle is that a client interacts with a network application entirely through hypermedia provided dynamically by application servers. A REST client needs no prior knowledge about how to interact with any particular application or server beyond a generic understanding of hypermedia. Contrast this with e.g. a service-oriented architecture (SOA), where clients and servers interact through a fixed interface shared through documentation or an interface description language (IDL).The HATEOAS constraint serves to decouple client and server in a way that allows the server to evolve functionality independently.","image":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/building-blocks\/bw-hypermedia.png","tags":"API-Design"}],"published":"11\/09\/2013"}